@model WedMockExam.Web.Models.ViewModels.Workplace.WorkplaceViewModel
@{
    ViewData["Title"] = "Workplace Details";
}

<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card shadow-sm">
                <div class="card-header bg-info text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-info-circle me-2"></i>Workplace Details
                        </h5>
                        <div class="btn-group">
                            <a asp-action="Edit" asp-route-id="@Model.WorkplaceId" class="btn btn-light btn-sm">
                                <i class="bi bi-pencil me-1"></i>Edit
                            </a>
                            <a asp-action="Index" class="btn btn-light btn-sm">
                                <i class="bi bi-arrow-left me-1"></i>Back to List
                            </a>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row g-4">
                        <!-- Basic Information -->
                        <div class="col-md-6">
                            <div class="card h-100 border-0 bg-light">
                                <div class="card-body">
                                    <h6 class="card-subtitle mb-3 text-muted">
                                        <i class="bi bi-building me-2"></i>Basic Information
                                    </h6>
                                    <dl class="row mb-0">
                                        <dt class="col-sm-4">Workplace ID</dt>
                                        <dd class="col-sm-8">@Model.WorkplaceId</dd>

                                        <dt class="col-sm-4">Floor</dt>
                                        <dd class="col-sm-8">@Model.Floor</dd>

                                        <dt class="col-sm-4">Zone</dt>
                                        <dd class="col-sm-8">@Model.Zone</dd>
                                    </dl>
                                </div>
                            </div>
                        </div>

                        <!-- Equipment -->
                        <div class="col-md-6">
                            <div class="card h-100 border-0 bg-light">
                                <div class="card-body">
                                    <h6 class="card-subtitle mb-3 text-muted">
                                        <i class="bi bi-tools me-2"></i>Equipment
                                    </h6>
                                    <div class="d-flex flex-wrap gap-2">
                                        @if (Model.HasMonitor)
                                        {
                                            <span class="badge bg-info">
                                                <i class="bi bi-display me-1"></i>Monitor
                                            </span>
                                        }
                                        @if (Model.HasDocking)
                                        {
                                            <span class="badge bg-info">
                                                <i class="bi bi-hdd-network me-1"></i>Docking
                                            </span>
                                        }
                                        @if (Model.HasWindow)
                                        {
                                            <span class="badge bg-info">
                                                <i class="bi bi-window me-1"></i>Window
                                            </span>
                                        }
                                        @if (Model.HasPrinter)
                                        {
                                            <span class="badge bg-info">
                                                <i class="bi bi-printer me-1"></i>Printer
                                            </span>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Actions -->
                        <div class="col-12">
                            <div class="d-grid gap-2">
                                <a asp-action="Edit" asp-route-id="@Model.WorkplaceId" class="btn btn-warning">
                                    <i class="bi bi-pencil me-2"></i>Edit Workplace
                                </a>
                                <form asp-action="Delete" asp-route-id="@Model.WorkplaceId" method="post" 
                                      onsubmit="return confirm('Are you sure you want to delete this workplace?');">
                                    <button type="submit" class="btn btn-danger w-100">
                                        <i class="bi bi-trash me-2"></i>Delete Workplace
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function checkAvailability() {
            const date = document.getElementById('checkDate').value;
            if (!date) {
                alert('Please select a date');
                return;
            }

            const resultDiv = document.getElementById('availabilityResult');
            resultDiv.innerHTML = '<div class="alert alert-info">Checking availability...</div>';

            fetch(`@Url.Action("CheckAvailability")?id=@Model.WorkplaceId&date=${date}`)
                .then(response => response.json())
                .then(data => {
                    if (data.isAvailable) {
                        resultDiv.innerHTML = `
                            <div class="alert alert-success">
                                <i class="bi bi-check-circle"></i> This workplace is available on ${new Date(date).toLocaleDateString()}
                            </div>`;
                    } else {
                        resultDiv.innerHTML = `
                            <div class="alert alert-warning">
                                <i class="bi bi-exclamation-triangle"></i> This workplace is not available on ${new Date(date).toLocaleDateString()}
                            </div>`;
                    }
                })
                .catch(error => {
                    resultDiv.innerHTML = `
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-circle"></i> Error checking availability
                        </div>`;
                });
        }

        // Set minimum date to today
        document.addEventListener('DOMContentLoaded', function() {
            const dateInput = document.getElementById('checkDate');
            const today = new Date().toISOString().split('T')[0];
            dateInput.setAttribute('min', today);
        });
    </script>
} 